"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[691],{3691:(e,t,n)=>{n.d(t,{ut:()=>i});var a=n(6045);class s{async diagnoseTruckIssue(e){try{console.log("Attempting diagnosis with Azure OpenAI...");let t=await this.azureService.diagnoseTruckIssue(e);return console.log("Azure OpenAI diagnosis successful"),t}catch(t){console.warn("Azure OpenAI failed, falling back to GitHub Models:",t);try{return await this.diagnoseWithGitHubModels(e)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models failed:",{azureError:t,githubError:e}),Error("AI diagnosis failed: Azure OpenAI (".concat(t,") and GitHub Models (").concat(e,")"))}}}async chat(e){try{console.log("Attempting chat with Azure OpenAI...");let t=await this.azureService.chatWithAssistant(e);return console.log("Azure OpenAI chat successful"),t}catch(t){console.warn("Azure OpenAI chat failed, falling back to GitHub Models:",t);try{return await this.chatWithGitHubModels(e)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models chat failed:",{azureError:t,githubError:e}),Error("AI chat failed: Azure OpenAI (".concat(t,") and GitHub Models (").concat(e,")"))}}}async streamChat(e,t){try{for await(let n of(console.log("Attempting streaming chat with Azure OpenAI..."),await this.azureService.streamChatResponse(e)))t(n);console.log("Azure OpenAI streaming chat successful");return}catch(n){console.warn("Azure OpenAI streaming failed, falling back to GitHub Models:",n);try{let n=await this.chatWithGitHubModels(e);t(n)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models streaming failed:",{azureError:n,githubError:e}),Error("AI streaming failed: Azure OpenAI (".concat(n,") and GitHub Models (").concat(e,")"))}}}async checkHealth(){try{if(await this.azureService.healthCheck())return{isHealthy:!0,service:"azure-openai",latency:0}}catch(e){console.warn("Azure OpenAI health check failed:",e)}try{let e=Date.now();await this.testGitHubModelsConnection();let t=Date.now()-e;return{isHealthy:!0,service:"github-models",latency:t}}catch(e){return{isHealthy:!1,service:"github-models",error:e instanceof Error?e.message:"Unknown error"}}}async diagnoseWithGitHubModels(e){var t,n;let a="TRUCK INFORMATION:\nMake: ".concat(e.truck.make,"\nModel: ").concat(e.truck.model,"\nYear: ").concat(e.truck.year||(e.truck.years?e.truck.years[e.truck.years.length-1]:"Unknown"),"\nEngine: ").concat(e.truck.engine,"\n\nREPORTED SYMPTOMS:\n").concat(e.symptoms.map((e,t)=>"".concat(t+1,". ").concat(e)).join("\n"),"\n\n").concat(e.additionalInfo?"ADDITIONAL INFORMATION:\n".concat(e.additionalInfo,"\n"):"","\n\nURGENCY LEVEL: ").concat(e.urgency||"medium","\n\nPlease provide a comprehensive diagnosis including:\n1. Most likely diagnosis with confidence level (1-10)\n2. Step-by-step repair instructions\n3. Required tools and equipment\n4. Estimated time and cost\n5. Important safety warnings\n6. Urgency assessment"),s=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:'You are an expert truck mechanic with over 20 years of experience specializing in commercial vehicle diagnostics and repair. You have extensive knowledge of:\n\n- Heavy-duty diesel engines (Caterpillar, Cummins, Detroit Diesel, PACCAR, Volvo, Mack)\n- Emissions systems (DPF, SCR, EGR, DEF)\n- Transmission systems (manual, automatic, AMT)\n- Air brake systems and pneumatics\n- Electrical and electronic systems\n- Preventive maintenance schedules\n\nProvide accurate, practical repair guidance with safety considerations. Always include cost estimates and time requirements.\n\nRespond ONLY with valid JSON in this exact format:\n{\n  "diagnosis": "string - detailed diagnosis",\n  "confidence": number (1-10),\n  "repairSteps": ["step 1", "step 2", "step 3"],\n  "requiredTools": ["tool 1", "tool 2"],\n  "estimatedTime": "string - time estimate",\n  "estimatedCost": "string - cost range",\n  "safetyWarnings": ["warning 1", "warning 2"],\n  "urgencyLevel": "low | medium | high"\n}'},{role:"user",content:a}],model:"gpt-4o",temperature:.1,max_tokens:2e3})});if(!s.ok)throw Error("GitHub Models API error: ".concat(s.status," ").concat(s.statusText));let i=null==(n=(await s.json()).choices[0])||null==(t=n.message)?void 0:t.content;if(!i)throw Error("No response content from GitHub Models");try{return JSON.parse(i)}catch(e){throw console.error("Failed to parse GitHub Models response:",i),Error("Invalid JSON response from GitHub Models")}}async chatWithGitHubModels(e){var t,n;let a=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:e,model:"gpt-4o",temperature:.7,max_tokens:1500})});if(!a.ok)throw Error("GitHub Models API error: ".concat(a.status," ").concat(a.statusText));return(null==(n=(await a.json()).choices[0])||null==(t=n.message)?void 0:t.content)||""}async testGitHubModelsConnection(){let e=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:"Test connection"}],model:"gpt-4o",max_tokens:10})});if(!e.ok)throw Error("GitHub Models connection test failed: ".concat(e.status))}async generateResponse(e){return this.chat(e)}async analyzeAudio(e,t){let n={truck:t,symptoms:["Audio analysis: "+e.substring(0,100)],additionalInfo:"Audio diagnostic data provided",urgency:"medium"};return this.diagnoseTruckIssue(n)}constructor(){this.azureService=new a.J,this.githubToken="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",this.githubEndpoint="https://models.inference.ai.azure.com"}}let i=new s},6045:(e,t,n)=>{n.d(t,{F:()=>i,J:()=>s});var a=n(9882);class s{async diagnoseTruckIssue(e){let t="TRUCK INFORMATION:\nMake: ".concat(e.truck.make,"\nModel: ").concat(e.truck.model,"\nYear: ").concat(e.truck.year||(e.truck.years?e.truck.years[e.truck.years.length-1]:"Unknown"),"\nEngine: ").concat(e.truck.engine,"\n\nREPORTED SYMPTOMS:\n").concat(e.symptoms.map((e,t)=>"".concat(t+1,". ").concat(e)).join("\n"),"\n\n").concat(e.additionalInfo?"ADDITIONAL INFORMATION:\n".concat(e.additionalInfo,"\n"):"","\n\nURGENCY LEVEL: ").concat(e.urgency||"medium","\n\nPlease provide a comprehensive diagnosis including:\n1. Most likely diagnosis with confidence level (1-10)\n2. Step-by-step repair instructions\n3. Required tools and parts\n4. Estimated repair time\n5. Estimated cost range\n6. Critical safety warnings\n7. Urgency assessment");try{var n,a;let s=null==(a=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:'You are an expert truck mechanic with over 20 years of experience specializing in commercial vehicle diagnostics and repair. You have extensive knowledge of:\n\n- Heavy-duty diesel engines (Caterpillar, Cummins, Detroit Diesel, PACCAR, Volvo, Mack)\n- Emissions systems (DPF, SCR, EGR, DEF)\n- Transmission systems (manual, automatic, AMT)\n- Air brake systems and pneumatics\n- Electrical and electronic systems\n- Preventive maintenance schedules\n\nProvide accurate, practical repair guidance with safety considerations. Always include cost estimates and time requirements.\n\nRespond ONLY with valid JSON in this exact format:\n{\n  "diagnosis": "string - detailed diagnosis",\n  "confidence": number (1-10),\n  "repairSteps": ["step 1", "step 2", "step 3"],\n  "requiredTools": ["tool 1", "tool 2"],\n  "estimatedTime": "string - time estimate",\n  "estimatedCost": "string - cost range",\n  "safetyWarnings": ["warning 1", "warning 2"],\n  "urgencyLevel": "low | medium | high"\n}'},{role:"user",content:t}],max_tokens:4e3,temperature:.3,response_format:{type:"json_object"}})).choices[0])||null==(n=a.message)?void 0:n.content;if(!s)throw Error("No response content received");try{return JSON.parse(s)}catch(t){return{diagnosis:s,confidence:7,repairSteps:["Contact a qualified mechanic for detailed diagnosis"],requiredTools:["Professional diagnostic tools"],estimatedTime:"1-3 hours",estimatedCost:"$200-800",safetyWarnings:["Always follow proper safety procedures"],urgencyLevel:e.urgency||"medium"}}}catch(e){throw console.error("Error calling Azure OpenAI API:",e),Error("Failed to get AI diagnosis. Please try again.")}}async chatWithAssistant(e){try{var t,n;return(null==(n=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are a professional truck repair assistant with expertise in heavy-duty vehicle maintenance and diagnostics. \n    Provide helpful, accurate, and safety-focused advice. Always recommend professional inspection for critical issues."},...e],max_tokens:2e3,temperature:.1,stream:!1})).choices[0])||null==(t=n.message)?void 0:t.content)||"Sorry, I could not process your request."}catch(e){return console.error("Error in chat:",e),"I apologize, but I'm having trouble connecting to the AI service. Please try again later or consult with a professional mechanic."}}async streamChatResponse(e){try{let t=await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are a professional truck repair assistant with expertise in heavy-duty vehicle maintenance and diagnostics. \n    Provide helpful, accurate, and safety-focused advice. Always recommend professional inspection for critical issues."},...e],max_tokens:2e3,temperature:.1,stream:!0});return this.processStream(t)}catch(e){throw console.error("Error in streaming chat:",e),e}}async *processStream(e){for await(let s of e){var t,n,a;let e=null==(a=s.choices)||null==(n=a[0])||null==(t=n.delta)?void 0:t.content;e&&(yield e)}}async analyzeEngineSound(e,t){var n,a;let s=await this.describeAudioIssue(e),i="Based on this audio description from a ".concat(t.make," ").concat(t.model,' truck engine: "').concat(s,'"\n    \n    Please analyze what mechanical issues this might indicate and provide diagnostic guidance.');return(null==(a=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are an expert truck mechanic specializing in engine diagnostics through sound analysis."},{role:"user",content:i}],max_tokens:1e3,temperature:.2})).choices[0])||null==(n=a.message)?void 0:n.content)||"Unable to analyze audio at this time."}async describeAudioIssue(e){return"Engine sound with unusual noise patterns detected"}async healthCheck(){try{return await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"user",content:"Health check"}],max_tokens:10}),!0}catch(e){return console.error("Azure OpenAI health check failed:",e),!1}}constructor(){this.config={endpoint:"https://makee-mbmcw6g5-swedencentral.cognitiveservices.azure.com/",apiKey:"Bq5WNG1dChvrUogsFB3c0xp2aSmJNph6Vpj2e1evgSkTdri4fTQQJQQJ99BFACfhMk5XJ3w3AAAAACOGiIZj",apiVersion:"2024-12-01-preview",deploymentName:"gpt-4o"},this.client=new a.AC({apiVersion:this.config.apiVersion,endpoint:this.config.endpoint,apiKey:this.config.apiKey})}}let i=new s}}]);