"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[51],{3691:(e,t,n)=>{var i=n(6045),a=n(1890);class s{async diagnoseTruckIssue(e){try{console.log("Attempting diagnosis with Azure OpenAI...");let t=await this.azureService.diagnoseTruckIssue(e);return console.log("Azure OpenAI diagnosis successful"),t}catch(t){console.warn("Azure OpenAI failed, falling back to GitHub Models:",t);try{return await this.diagnoseWithGitHubModels(e)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models failed:",{azureError:t,githubError:e}),Error("AI diagnosis failed: Azure OpenAI (".concat(t,") and GitHub Models (").concat(e,")"))}}}async chat(e){try{console.log("Attempting chat with Azure OpenAI...");let t=await this.azureService.chatWithAssistant(e);return console.log("Azure OpenAI chat successful"),t}catch(t){console.warn("Azure OpenAI chat failed, falling back to GitHub Models:",t);try{return await this.chatWithGitHubModels(e)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models chat failed:",{azureError:t,githubError:e}),Error("AI chat failed: Azure OpenAI (".concat(t,") and GitHub Models (").concat(e,")"))}}}async streamChat(e,t){try{for await(let n of(console.log("Attempting streaming chat with Azure OpenAI..."),await this.azureService.streamChatResponse(e)))t(n);console.log("Azure OpenAI streaming chat successful");return}catch(n){console.warn("Azure OpenAI streaming failed, falling back to GitHub Models:",n);try{let n=await this.chatWithGitHubModels(e);t(n)}catch(e){throw console.error("Both Azure OpenAI and GitHub Models streaming failed:",{azureError:n,githubError:e}),Error("AI streaming failed: Azure OpenAI (".concat(n,") and GitHub Models (").concat(e,")"))}}}async checkHealth(){try{if(await this.azureService.healthCheck())return{isHealthy:!0,service:"azure-openai",latency:0}}catch(e){console.warn("Azure OpenAI health check failed:",e)}try{let e=Date.now();await this.testGitHubModelsConnection();let t=Date.now()-e;return{isHealthy:!0,service:"github-models",latency:t}}catch(e){return{isHealthy:!1,service:"github-models",error:e instanceof Error?e.message:"Unknown error"}}}async diagnoseWithGitHubModels(e){var t,n;let i="TRUCK INFORMATION:\nMake: ".concat(e.truck.make,"\nModel: ").concat(e.truck.model,"\nYear: ").concat(e.truck.year||(e.truck.years?e.truck.years[e.truck.years.length-1]:"Unknown"),"\nEngine: ").concat(e.truck.engine,"\n\nREPORTED SYMPTOMS:\n").concat(e.symptoms.map((e,t)=>"".concat(t+1,". ").concat(e)).join("\n"),"\n\n").concat(e.additionalInfo?"ADDITIONAL INFORMATION:\n".concat(e.additionalInfo,"\n"):"","\n\nURGENCY LEVEL: ").concat(e.urgency||"medium","\n\nPlease provide a comprehensive diagnosis including:\n1. Most likely diagnosis with confidence level (1-10)\n2. Step-by-step repair instructions\n3. Required tools and equipment\n4. Estimated time and cost\n5. Important safety warnings\n6. Urgency assessment"),a=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:'You are an expert truck mechanic with over 20 years of experience specializing in commercial vehicle diagnostics and repair. You have extensive knowledge of:\n\n- Heavy-duty diesel engines (Caterpillar, Cummins, Detroit Diesel, PACCAR, Volvo, Mack)\n- Emissions systems (DPF, SCR, EGR, DEF)\n- Transmission systems (manual, automatic, AMT)\n- Air brake systems and pneumatics\n- Electrical and electronic systems\n- Preventive maintenance schedules\n\nProvide accurate, practical repair guidance with safety considerations. Always include cost estimates and time requirements.\n\nRespond ONLY with valid JSON in this exact format:\n{\n  "diagnosis": "string - detailed diagnosis",\n  "confidence": number (1-10),\n  "repairSteps": ["step 1", "step 2", "step 3"],\n  "requiredTools": ["tool 1", "tool 2"],\n  "estimatedTime": "string - time estimate",\n  "estimatedCost": "string - cost range",\n  "safetyWarnings": ["warning 1", "warning 2"],\n  "urgencyLevel": "low | medium | high"\n}'},{role:"user",content:i}],model:"gpt-4o",temperature:.1,max_tokens:2e3})});if(!a.ok)throw Error("GitHub Models API error: ".concat(a.status," ").concat(a.statusText));let s=null==(n=(await a.json()).choices[0])||null==(t=n.message)?void 0:t.content;if(!s)throw Error("No response content from GitHub Models");try{return JSON.parse(s)}catch(e){throw console.error("Failed to parse GitHub Models response:",s),Error("Invalid JSON response from GitHub Models")}}async chatWithGitHubModels(e){var t,n;let i=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:e,model:"gpt-4o",temperature:.7,max_tokens:1500})});if(!i.ok)throw Error("GitHub Models API error: ".concat(i.status," ").concat(i.statusText));return(null==(n=(await i.json()).choices[0])||null==(t=n.message)?void 0:t.content)||""}async testGitHubModelsConnection(){let e=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:"Test connection"}],model:"gpt-4o",max_tokens:10})});if(!e.ok)throw Error("GitHub Models connection test failed: ".concat(e.status))}async generateResponse(e){return this.chat(e)}async analyzeAudio(e,t){let n={truck:t,symptoms:["Audio analysis: "+e.substring(0,100)],additionalInfo:"Audio diagnostic data provided",urgency:"medium"};return this.diagnoseTruckIssue(n)}constructor(){this.azureService=new i.J,this.githubToken=a.env.NEXT_PUBLIC_GITHUB_TOKEN||"",this.githubEndpoint="https://models.inference.ai.azure.com"}}new s},5065:(e,t,n)=>{n.r(t),n.d(t,{ClientAIService:()=>i,clientAIService:()=>a});class i{async diagnoseTruckIssue(e){let t=await fetch("".concat(this.baseUrl,"/ai/diagnose"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw Error((await t.json()).error||"Failed to diagnose truck issue");return(await t.json()).result}async chatWithAssistant(e){let t=await fetch("".concat(this.baseUrl,"/ai/chat"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:e})});if(!t.ok)throw Error((await t.json()).error||"Failed to chat with assistant");return(await t.json()).response}async checkHealth(){try{let e=await fetch("".concat(this.baseUrl,"/ai/health")),t=await e.json();return{service:t.service||"azure-openai",isHealthy:"healthy"===t.status||"ok"===t.status||!0===t.available,latency:"number"==typeof t.latency?t.latency:void 0,error:t.error||void 0}}catch(e){return{service:"azure-openai",isHealthy:!1,error:e instanceof Error?e.message:"Health check failed"}}}async streamChatResponse(e){throw Error("Streaming not yet implemented for client-side service")}async analyzeEngineSound(e,t){throw Error("Audio analysis not yet implemented for client-side service")}constructor(){this.baseUrl="/api"}}let a=new i},6045:(e,t,n)=>{n.d(t,{J:()=>a}),n(9882);var i=n(1890);class a{async diagnoseTruckIssue(e){if(!this.client)throw Error("Azure OpenAI client not initialized. This service must run on the server side.");let t="TRUCK INFORMATION:\nMake: ".concat(e.truck.make,"\nModel: ").concat(e.truck.model,"\nYear: ").concat(e.truck.year||(e.truck.years?e.truck.years[e.truck.years.length-1]:"Unknown"),"\nEngine: ").concat(e.truck.engine,"\n\nREPORTED SYMPTOMS:\n").concat(e.symptoms.map((e,t)=>"".concat(t+1,". ").concat(e)).join("\n"),"\n\n").concat(e.additionalInfo?"ADDITIONAL INFORMATION:\n".concat(e.additionalInfo,"\n"):"","\n\nURGENCY LEVEL: ").concat(e.urgency||"medium","\n\nPlease provide a comprehensive diagnosis including:\n1. Most likely diagnosis with confidence level (1-10)\n2. Step-by-step repair instructions\n3. Required tools and parts\n4. Estimated repair time\n5. Estimated cost range\n6. Critical safety warnings\n7. Urgency assessment");try{var n,i;let a=null==(i=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:'You are an expert truck mechanic with over 20 years of experience specializing in commercial vehicle diagnostics and repair. You have extensive knowledge of:\n\n- Heavy-duty diesel engines (Caterpillar, Cummins, Detroit Diesel, PACCAR, Volvo, Mack)\n- Emissions systems (DPF, SCR, EGR, DEF)\n- Transmission systems (manual, automatic, AMT)\n- Air brake systems and pneumatics\n- Electrical and electronic systems\n- Preventive maintenance schedules\n\nProvide accurate, practical repair guidance with safety considerations. Always include cost estimates and time requirements.\n\nRespond ONLY with valid JSON in this exact format:\n{\n  "diagnosis": "string - detailed diagnosis",\n  "confidence": number (1-10),\n  "repairSteps": ["step 1", "step 2", "step 3"],\n  "requiredTools": ["tool 1", "tool 2"],\n  "estimatedTime": "string - time estimate",\n  "estimatedCost": "string - cost range",\n  "safetyWarnings": ["warning 1", "warning 2"],\n  "urgencyLevel": "low | medium | high"\n}'},{role:"user",content:t}],max_tokens:4e3,temperature:.3,response_format:{type:"json_object"}})).choices[0])||null==(n=i.message)?void 0:n.content;if(!a)throw Error("No response content received");try{return JSON.parse(a)}catch(t){return{diagnosis:a,confidence:7,repairSteps:["Contact a qualified mechanic for detailed diagnosis"],requiredTools:["Professional diagnostic tools"],estimatedTime:"1-3 hours",estimatedCost:"$200-800",safetyWarnings:["Always follow proper safety procedures"],urgencyLevel:e.urgency||"medium"}}}catch(e){throw console.error("Error calling Azure OpenAI API:",e),Error("Failed to get AI diagnosis. Please try again.")}}async chatWithAssistant(e){if(!this.client)throw Error("Azure OpenAI client not initialized. This service must run on the server side.");try{var t,n;return(null==(n=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are a professional truck repair assistant with expertise in heavy-duty vehicle maintenance and diagnostics. \n    Provide helpful, accurate, and safety-focused advice. Always recommend professional inspection for critical issues."},...e],max_tokens:2e3,temperature:.1,stream:!1})).choices[0])||null==(t=n.message)?void 0:t.content)||"Sorry, I could not process your request."}catch(e){return console.error("Error in chat:",e),"I apologize, but I'm having trouble connecting to the AI service. Please try again later or consult with a professional mechanic."}}async streamChatResponse(e){if(!this.client)throw Error("Azure OpenAI client not initialized. This service must run on the server side.");try{let t=await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are a professional truck repair assistant with expertise in heavy-duty vehicle maintenance and diagnostics. \n    Provide helpful, accurate, and safety-focused advice. Always recommend professional inspection for critical issues."},...e],max_tokens:2e3,temperature:.1,stream:!0});return this.processStream(t)}catch(e){throw console.error("Error in streaming chat:",e),e}}async *processStream(e){for await(let a of e){var t,n,i;let e=null==(i=a.choices)||null==(n=i[0])||null==(t=n.delta)?void 0:t.content;e&&(yield e)}}async analyzeEngineSound(e,t){var n,i;if(!this.client)throw Error("Azure OpenAI client not initialized. This service must run on the server side.");let a=await this.describeAudioIssue(e),s="Based on this audio description from a ".concat(t.make," ").concat(t.model,' truck engine: "').concat(a,'"\n    \n    Please analyze what mechanical issues this might indicate and provide diagnostic guidance.');return(null==(i=(await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"system",content:"You are an expert truck mechanic specializing in engine diagnostics through sound analysis."},{role:"user",content:s}],max_tokens:1e3,temperature:.2})).choices[0])||null==(n=i.message)?void 0:n.content)||"Unable to analyze audio at this time."}async describeAudioIssue(e){return"Engine sound with unusual noise patterns detected"}async healthCheck(){if(!this.client)return!1;try{return await this.client.chat.completions.create({model:this.config.deploymentName,messages:[{role:"user",content:"Health check"}],max_tokens:10}),!0}catch(e){return console.error("Azure OpenAI health check failed:",e),!1}}constructor(){this.client=null,this.config={endpoint:i.env.AZURE_OPENAI_ENDPOINT||"https://makee-mbmcw6g5-swedencentral.cognitiveservices.azure.com/",apiKey:i.env.AZURE_OPENAI_KEY,apiVersion:i.env.AZURE_OPENAI_API_VERSION||"2024-12-01-preview",deploymentName:i.env.AZURE_OPENAI_DEPLOYMENT||"gpt-4o"}}}new a},6758:(e,t,n)=>{var i=n(6045),a=n(1890);class s{async diagnoseTruckIssue(e){let t=[];if("azure-openai"===this.config.primaryProvider)try{console.log("\uD83D\uDD0D Attempting diagnosis with Azure OpenAI (primary)...");let t=await this.withTimeout(this.azureService.diagnoseTruckIssue(e),this.config.timeout);return console.log("✅ Azure OpenAI diagnosis successful"),{result:t,provider:"azure-openai",fallbackUsed:!1}}catch(n){let e={provider:"azure-openai",error:n instanceof Error?n:Error(String(n)),context:"Primary diagnosis attempt"};t.push(e),console.warn("⚠️ Azure OpenAI failed:",e.error.message)}if(this.config.fallbackEnabled)try{console.log("\uD83D\uDD04 Falling back to GitHub Models...");let n=await this.withTimeout(this.diagnoseWithGitHubModels(e),this.config.timeout);return console.log("✅ GitHub Models diagnosis successful (fallback)"),{result:n,provider:"github-models",fallbackUsed:!0,errors:t}}catch(n){let e={provider:"github-models",error:n instanceof Error?n:Error(String(n)),context:"Fallback diagnosis attempt"};t.push(e),console.error("❌ GitHub Models also failed:",e.error.message)}throw Error("All AI providers failed: ".concat(t.map(e=>"".concat(e.provider,": ").concat(e.error.message)).join(", ")))}async chat(e){let t=[];try{console.log("\uD83D\uDCAC Attempting chat with Azure OpenAI...");let t=await this.withTimeout(this.azureService.chatWithAssistant(e),this.config.timeout);return console.log("✅ Azure OpenAI chat successful"),{result:t,provider:"azure-openai",fallbackUsed:!1}}catch(n){let e={provider:"azure-openai",error:n instanceof Error?n:Error(String(n)),context:"Chat attempt"};t.push(e),console.warn("⚠️ Azure OpenAI chat failed:",e.error.message)}if(this.config.fallbackEnabled)try{console.log("\uD83D\uDD04 Falling back to GitHub Models for chat...");let n=await this.withTimeout(this.chatWithGitHubModels(e),this.config.timeout);return console.log("✅ GitHub Models chat successful (fallback)"),{result:n,provider:"github-models",fallbackUsed:!0,errors:t}}catch(n){let e={provider:"github-models",error:n instanceof Error?n:Error(String(n)),context:"Fallback chat attempt"};t.push(e),console.error("❌ GitHub Models chat also failed:",e.error.message)}throw Error("All chat providers failed: ".concat(t.map(e=>"".concat(e.provider,": ").concat(e.error.message)).join(", ")))}async streamChat(e,t){try{for await(let n of(console.log("\uD83C\uDF0A Attempting streaming chat with Azure OpenAI..."),await this.azureService.streamChatResponse(e)))t(n);console.log("✅ Azure OpenAI streaming successful")}catch(n){if(console.warn("⚠️ Azure OpenAI streaming failed, falling back to regular chat:",n),this.config.fallbackEnabled)try{let n=await this.chatWithGitHubModels(e);t(n),console.log("✅ Fallback to GitHub Models successful")}catch(e){throw console.error("❌ Both streaming and fallback failed:",e),Error("Streaming failed: ".concat(n,". Fallback also failed: ").concat(e))}else throw n}}async checkHealth(){let e=[];try{let t=Date.now(),n=await this.azureService.healthCheck(),i=Date.now()-t;e.push({isHealthy:n,service:"azure-openai",latency:i})}catch(t){e.push({isHealthy:!1,service:"azure-openai",error:t instanceof Error?t.message:"Unknown error"})}try{let t=Date.now();await this.testGitHubModelsConnection();let n=Date.now()-t;e.push({isHealthy:!0,service:"github-models",latency:n})}catch(t){e.push({isHealthy:!1,service:"github-models",error:t instanceof Error?t.message:"Unknown error"})}return e}async withTimeout(e,t){return Promise.race([e,new Promise((e,n)=>{setTimeout(()=>n(Error("Operation timed out after ".concat(t,"ms"))),t)})])}async diagnoseWithGitHubModels(e){var t,n;let i="TRUCK INFORMATION:\nMake: ".concat(e.truck.make,"\nModel: ").concat(e.truck.model,"\nYear: ").concat(e.truck.year||(e.truck.years?e.truck.years[e.truck.years.length-1]:"Unknown"),"\nEngine: ").concat(e.truck.engine,"\n\nREPORTED SYMPTOMS:\n").concat(e.symptoms.map((e,t)=>"".concat(t+1,". ").concat(e)).join("\n"),"\n\n").concat(e.additionalInfo?"ADDITIONAL INFORMATION:\n".concat(e.additionalInfo,"\n"):"","\n\nURGENCY LEVEL: ").concat(e.urgency||"medium","\n\nPlease provide a comprehensive diagnosis including:\n1. Most likely diagnosis with confidence level (1-10)\n2. Step-by-step repair instructions\n3. Required tools and equipment\n4. Estimated time and cost\n5. Important safety warnings\n6. Urgency assessment"),a=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:'You are an expert truck mechanic with over 20 years of experience specializing in commercial vehicle diagnostics and repair. You have extensive knowledge of:\n\n- Heavy-duty diesel engines (Caterpillar, Cummins, Detroit Diesel, PACCAR, Volvo, Mack)\n- Emissions systems (DPF, SCR, EGR, DEF)\n- Transmission systems (manual, automatic, AMT)\n- Air brake systems and pneumatics\n- Electrical and electronic systems\n- Preventive maintenance schedules\n\nProvide accurate, practical repair guidance with safety considerations. Always include cost estimates and time requirements.\n\nRespond ONLY with valid JSON in this exact format:\n{\n  "diagnosis": "string - detailed diagnosis",\n  "confidence": number (1-10),\n  "repairSteps": ["step 1", "step 2", "step 3"],\n  "requiredTools": ["tool 1", "tool 2"],\n  "estimatedTime": "string - time estimate",\n  "estimatedCost": "string - cost range",\n  "safetyWarnings": ["warning 1", "warning 2"],\n  "urgencyLevel": "low | medium | high"\n}'},{role:"user",content:i}],model:"gpt-4o",temperature:.1,max_tokens:2e3})});if(!a.ok)throw Error("GitHub Models API error: ".concat(a.status," ").concat(a.statusText));let s=null==(n=(await a.json()).choices[0])||null==(t=n.message)?void 0:t.content;if(!s)throw Error("No response content from GitHub Models");try{return JSON.parse(s)}catch(e){throw console.error("Failed to parse GitHub Models response:",s),Error("Invalid JSON response from GitHub Models")}}async chatWithGitHubModels(e){var t,n;let i=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:e,model:"gpt-4o",temperature:.7,max_tokens:1500})});if(!i.ok)throw Error("GitHub Models API error: ".concat(i.status," ").concat(i.statusText));return(null==(n=(await i.json()).choices[0])||null==(t=n.message)?void 0:t.content)||""}async testGitHubModelsConnection(){let e=await fetch("".concat(this.githubEndpoint,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.githubToken),"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:"Test connection"}],model:"gpt-4o",max_tokens:10})});if(!e.ok)throw Error("GitHub Models connection test failed: ".concat(e.status))}async generateResponse(e){return(await this.chat(e)).result}async analyzeAudio(e,t){let n={truck:t,symptoms:["Audio analysis: "+e.substring(0,100)],additionalInfo:"Audio diagnostic data provided",urgency:"medium"};return(await this.diagnoseTruckIssue(n)).result}setPrimaryProvider(e){this.config.primaryProvider=e}setFallbackEnabled(e){this.config.fallbackEnabled=e}setTimeout(e){this.config.timeout=e}getConfig(){return{...this.config}}constructor(e){this.azureService=new i.J,this.githubToken=a.env.NEXT_PUBLIC_GITHUB_TOKEN||"",this.githubEndpoint="https://models.inference.ai.azure.com",this.config={primaryProvider:"azure-openai",fallbackEnabled:!0,timeout:3e4,...e}}}new s},8051:(e,t,n)=>{n.a(e,async(e,i)=>{try{n.d(t,{t$:()=>a.clientAIService}),n(6045),n(6758),n(3691);var a=n(5065);(await Promise.resolve().then(n.bind(n,5065))).clientAIService,i()}catch(e){i(e)}},1)}}]);